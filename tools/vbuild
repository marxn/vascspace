#!/bin/bash
tag=""
result="0"
if [ "$#" -lt "2" ]; then
    echo "usage: vbuild -p <project_name> [-t <tag>] -e <env>"
    exit 1
fi

while [ $# -ge 2 ] ; do
    case "$1" in
        -p) projectname=$2; shift 2;;
        -l) planname=$2; shift 2;;
        -t) tag=$2; shift 2;;
        -e) env=$2; shift 2;;
         *) echo "unknown parameter $1." ; exit 1 ; break;;
    esac
done

if [ "$env" == "" ]; then
    echo "env cannot be empty. break"
    exit 1
fi

if [ ! -d "$GOPATH/src/$projectname/" ];then
    project_addr=`grep -E "^$projectname " $GOPATH/vpcm/$env/project_list.scm | awk '{ print $2; }'`
    if [ -z "$project_addr" ]; then
        exit 1
    fi
    git clone $project_addr $GOPATH/src/$projectname
fi

cdir=`pwd`
cd $GOPATH/src/$projectname

current_branch=`git rev-parse --abbrev-ref HEAD`
if [ "$tag" != "" ]; then
    git pull --tags
    git checkout -q $tag
    if [ "$?" -ne "0" ]; then
        echo "Cannot checkout tag:$tag. break"
        exit 1
    fi
fi

if [ -f $GOPATH/src/$projectname/enable_puff ];then
    echo "Start to generate puff_main.go..."
    cd $GOPATH/src
    rm -f $projectname/puff_main.go
    puff -i $projectname -o $projectname/puff_main.go -c $GOPATH/vpcm/$env//vasc_conf/$projectname.json
fi

cd $GOPATH/src/$projectname
mkdir -p $GOPATH/target/$env/$projectname/$tag
need_remove_makefile="0"
if [ ! -f $GOPATH/src/$projectname/makefile ]; then
    echo "Generating makefile for $projectname..."
    cp $GOPATH/deploy/makefile $GOPATH/src/$projectname/makefile
    need_remove_makefile="1"
fi

make clean; make DESTNATION="$GOPATH/target/$env/$projectname/$tag"
if [ "$?" -ne "0" ]; then
    echo "Cannot build target. break"
    rm -rf $GOPATH/target/$env/$projectname/$tag
    result="1"
fi

if [ "$need_remove_makefile" == "1" ]; then
    rm -f makefile
fi

cp $GOPATH/deploy/*.sh $GOPATH/target/$env/$projectname/$tag
if [ -f $GOPATH/src/$projectname/conf/nginx.conf.$env ]; then
    cp $GOPATH/src/$projectname/conf/nginx.conf.$env $GOPATH/target/$env/$projectname/$tag/nginx.conf
else
    if [ -f $GOPATH/src/$projectname/conf/nginx.conf.all ]; then
        cp $GOPATH/src/$projectname/conf/nginx.conf.all $GOPATH/target/$env/$projectname/$tag/nginx.conf
    fi
fi

if [ -d $GOPATH/target/$env/$projectname/$tag/bin ]; then
    chmod +x $GOPATH/target/$env/$projectname/$tag/bin/*
fi

git checkout -q $current_branch
exit $result

