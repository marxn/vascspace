#!/bin/bash
tag=""
result="0"
if [ "$#" -lt "2" ]; then
    echo "usage: vbuild -p <project_name> [-t <tag>] -e <env>"
    exit 1
fi

while [ $# -ge 2 ] ; do
    case "$1" in
        -p) projectname=$2; shift 2;;
        -l) planname=$2; shift 2;;
        -t) tag=$2; shift 2;;
        -e) env=$2; shift 2;;
         *) echo "unknown parameter $1." ; exit 1 ; break;;
    esac
done

if [ "$env" == "" ]; then
    echo "env cannot be empty. break"
    exit 1
fi

if [ "$projectname" == "" ]; then
    projectname=`basename \`pwd\``
fi

if [ "$tag" == "" ]; then
    if [ ! -f "$GOPATH/src/$projectname/version.txt" ]; then
        if [ ! -f "$GOPATH/src/$projectname/src/version.txt" ]; then
            if [ ! -f "$GOPATH/src/$projectname/bin/version.txt" ]; then
                echo -e "\033[31mCannot find version.txt for project:$projectname\033[0m"
                exit 1
            else
                tag=`cat $GOPATH/src/$projectname/bin/version.txt`
            fi
        else
            tag=`cat $GOPATH/src/$projectname/src/version.txt`
        fi
    else
        tag=`cat $GOPATH/src/$projectname/version.txt`
    fi
fi

if [ ! -d "$GOPATH/src/$projectname/" ];then
    project_addr=`grep -E "^$projectname " `configloader -i $GOPATH/vpcm/$env/config.json -s projectlist` | awk '{ print $2; }'`
    if [ -z "$project_addr" ]; then
        exit 1
    fi
    git clone $project_addr $GOPATH/src/$projectname
fi

cdir=`pwd`
cd $GOPATH/src/$projectname

current_branch=`git rev-parse --abbrev-ref HEAD`
if [ "$tag" != "" ]; then
    git pull
    git fetch --tags
    git checkout -q $tag
    if [ "$?" -ne "0" ]; then
        echo "Cannot checkout tag:$tag. break"
        exit 1
    fi
fi

cd $GOPATH/src/$projectname
rm -fr $GOPATH/target/$env/$projectname/$tag
mkdir -p $GOPATH/target/$env/$projectname/$tag
need_remove_makefile="0"
if [ ! -f $GOPATH/src/$projectname/makefile ]; then
    echo "Generating makefile for $projectname..."
    cp $GOPATH/deploy/makefile $GOPATH/src/$projectname/makefile
    need_remove_makefile="1"
fi

goos=`configloader -i $GOPATH/vpcm/$env/config.json -s goos`
goarch=`configloader -i $GOPATH/vpcm/$env/config.json -s goarch`

make clean
make DESTNATION="$GOPATH/target/$env/$projectname/$tag" VASC_CONFIG="$GOPATH/vpcm/$env/vasc_conf/$projectname.json" GOOS=$goos GOARCH=$goarch

if [ "$?" -ne "0" ]; then
    echo "Cannot build target. break"
    rm -rf $GOPATH/target/$env/$projectname/$tag
    result="1"
fi

if [ "$need_remove_makefile" == "1" ]; then
    rm -f makefile
fi

if [ -f $GOPATH/deploy/vasc_init.sh ]; then
    cp $GOPATH/deploy/vasc_init.sh $GOPATH/target/$env/$projectname/$tag
fi

if [ -f $GOPATH/deploy/vasc_guard.sh ]; then
    cp $GOPATH/deploy/vasc_guard.sh $GOPATH/target/$env/$projectname/$tag
fi

if [ -f $GOPATH/src/$projectname/${projectname}_start.sh ]; then
    cp $GOPATH/src/$projectname/${projectname}_start.sh $GOPATH/target/$env/$projectname/$tag
else
    cp $GOPATH/deploy/vasc_start.sh $GOPATH/target/$env/$projectname/$tag/${projectname}_start.sh
fi

if [ -f $GOPATH/src/$projectname/${projectname}_stop.sh ]; then
    cp $GOPATH/src/$projectname/${projectname}_stop.sh $GOPATH/target/$env/$projectname/$tag
else
    cp $GOPATH/deploy/vasc_stop.sh $GOPATH/target/$env/$projectname/$tag/${projectname}_stop.sh
fi

if [ -f $GOPATH/src/$projectname/conf/nginx.conf.$env ]; then
    cp $GOPATH/src/$projectname/conf/nginx.conf.$env $GOPATH/target/$env/$projectname/$tag/nginx.conf
else
    if [ -f $GOPATH/src/$projectname/conf/nginx.conf.all ]; then
        cp $GOPATH/src/$projectname/conf/nginx.conf.all $GOPATH/target/$env/$projectname/$tag/nginx.conf
    fi
fi

if [ -d $GOPATH/target/$env/$projectname/$tag/bin ]; then
    chmod +x $GOPATH/target/$env/$projectname/$tag/bin/*
fi

git checkout -q $current_branch
exit $result

