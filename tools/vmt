#!/bin/bash
#Vspace Manufacture Tool
username=`id -un`
projectroot="$HOME/project"
marapubpath="/data/x/tools/mara-pub"
token=`cat /proc/sys/kernel/random/uuid`
toberestarted_projects=""
is_restartting="no"

publish_project() {
    hostname=$1
    port=$2
    username=$3
    projectname=$4
    planname=$5
    tag=$6
    
    local_serviceroot=""
    local_serviceuser=""
    local_servicegroup=""
    
    if [ -f $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/service_user.env ]; then 
        local_serviceuser=`cat $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/service_user.env`
    fi
    if [ -f $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/service_group.env ]; then 
        local_servicegroup=`cat $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/service_group.env`
    fi
    
    if [ "$local_serviceuser" == "" ]; then
        local_serviceuser=$serviceuser
    fi
    if [ "$local_servicegroup" == "" ]; then
        local_servicegroup=$servicegroup
    fi
    
    if [ "$is_restartting" == "no" ];then
        cd $GOPATH/target/$destnation
        tar -czf $projectname.tar.gz $projectname/$tag/
        scp -P $port -q $projectname.tar.gz $username@$hostname:$projectroot/$projectname.tar.gz
        ssh -p $port -qt $username@$hostname "cd $projectroot; tar -xf $projectroot/$projectname.tar.gz; rm -f $projectroot/$projectname.tar.gz"
    fi
    
    if [ -d $marapubpath/projects/$planname ]; then
        local_serviceroot=`publoader -e $environment -i $marapubpath -p $planname -s deploy`
        before_cmd=`publoader -e $environment -i $marapubpath -p $planname -s before`
        after_cmd=`publoader -e $environment -i $marapubpath -p $planname -s after`
        export_path=`publoader -e $environment -i $marapubpath -p $planname -s exportpath`
        related_projects=`publoader -e $environment -i $marapubpath -p $planname -s related_project`
    else
        if [ -f $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/$planname.serviceroot ]; then 
            local_serviceroot=`cat $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/$planname.serviceroot` 
        fi
        if [ -f $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/$planname.before ]; then
            before_cmd=`cat $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/$planname.before`
        fi
        if [ -f $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/$planname.after ]; then
            after_cmd=`cat $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/$planname.after`
        fi
        if [ -f $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/$planname.export_path ]; then
            export_path=`cat $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/$planname.export_path`
        fi
        if [ -f $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/$planname.related ]; then
            related_projects=`cat $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/$planname.related`
        fi
    fi

    #Before publishing, do something compliable with rigger
    if [ "$before_cmd" != "" ]; then
        echo "Calling $projectname - $planname - before: [$before_cmd]"
        ssh -p $port -qt $username@$hostname "if [ -d $local_serviceroot/$projectname ]; then cd $local_serviceroot/$projectname; sudo $before_cmd; fi"
    fi

    if [ "$is_restartting" == "no" ];then
        #Do publishing
        ssh -p $port -qt $username@$hostname "sudo bash $projectroot/$projectname/$tag/vasc_init.sh \"$local_serviceroot\" \"$local_serviceuser\" \"$local_servicegroup\" \"$projectname\" \"$export_path\" \"$tag\" \"$environment\" \"$token\""
        toberestarted_projects="$toberestarted_projects $related_projects"
    fi
    
    #After publishing, compatible with rigger
    if [ "$after_cmd" != "" ]; then
        echo "Calling $projectname - $planname - after: [$after_cmd]"
        ssh -p $port -qt $username@$hostname "cd $local_serviceroot/$projectname; sudo $after_cmd"
    fi
    
    rm -f $projectname.tar.gz
}

restart_project() {
    hostname=$1
    port=$2
    username=$3
    
    #Restart related projects
    is_restartting="yes"
    if [ "$toberestarted_projects" != "" ];then
        for related_project in $toberestarted_projects
        do
            echo -e "\033[35mRestarting $related_project...\033[0m"
            publish_project $hostname $port $username $related_project $related_project 
        done
    fi
    is_restartting="no"
}

pull_branch() {
    branch=$1
    remote=`git remote -v | grep push | awk '{print $2}'`
    
    if [ "$branch" != "" ]; then
        git checkout $branch
    fi
    
    current_branch=`git rev-parse --abbrev-ref HEAD`
    remote_branch=`git branch -r | grep $current_branch`
    if [ "$remote_branch" == "" ]; then
        git push origin $current_branch
    fi
    git pull $remote $current_branch
    git fetch --tags
}

action=""
publish_option="no"
pull_source="no"
interact_option=""

while [ $# -ge 1 ] ; do
    case "$1" in
        -e) destnation=$2; shift 2;;
        -yes) interact_option="yes"; shift 1;;
        -no) interact_option="no"; shift 1;;
        -pro) action=pubproject; shift 1;;
        -plan) action=pubproject; selected_plan=$2; shift 2;;
        -p) baseline=$2; action=publish; publish_option="upgrade";shift 2;;
        -d) baseline=$2; action=publish; publish_option="diff"; shift 2;;
        -f) baseline=$2; action=publish; publish_option="all"; shift 2;;
        -g) baseline=""; action=generate; shift 1;;
        -c) baseline=""; action=generate; pull_source="yes"; shift 1;;
        -n) baseline=$2; shift 2;;
         *) echo "unknown parameter $1." ; exit 1 ; break;;
    esac
done

if [ "$action" == "" ]; then
    echo " usage: vmt -g/-c -e <environment> [-n <baseline>] [-yes/-no]"
    echo " usage: vmt -p/-d/-f <baseline> -e <environment>"
    echo " usage: vmt <-pro/-plan> -e <environment>"
    echo " Example: vmt -pro -e <environment>              Publish project in current directory to destnation environment(including all plans)"
    echo " Example: vmt -plan -e <environment>             Publish project in current directory to destnation environment(only publish identified plan)"
    echo " Example: vmt -g [-n <baseline>]                 Create a new baseline for all projects controlled in vpcm.(using current branch)"
    echo " Example: vmt -c [-n <baseline>]                 Create a new baseline for all projects controlled in vpcm.(using default branch)"
    echo " Example: vmt -p <baseline> -e <environment>     Publish the baseline(Only publish projects whose version is higher than remote)"
    echo " Example: vmt -d <baseline> -e <environment>     Publish the baseline(Only publish projects whose version is different from remote)"
    echo " Example: vmt -f <baseline> -e <environment>     Publish all the projects in baseline by force ignoring remote version"
    exit 1
fi

if [ "$destnation" == "" ]; then
        echo -e "\033[31mFailed: environment cannot be empty\033[0m"
        exit 1   
fi
    
if [ ! -f $GOPATH/vpcm/environment/$destnation/global/service_root.env ]; then
        echo -e "\033[31mPublishing failed: cannot find $GOPATH/vpcm/environment/$destnation/global/service_root.env\033[0m"
        exit 1
fi
serviceroot=`cat $GOPATH/vpcm/environment/$destnation/global/service_root.env`
if [ "$serviceroot" == "" ]; then
    echo -e "\033[31mPublishing failed: cannot find any content in $GOPATH/vpcm/environment/$destnation/global/service_root.env\033[0m"
    exit 1
fi

if [ ! -f $GOPATH/vpcm/environment/$destnation/global/service_user.env ]; then
    echo -e "\033[31mPublishing failed: cannot find $GOPATH/vpcm/environment/$destnation/global/service_user.env\033[0m"
    exit 1
fi
serviceuser=`cat $GOPATH/vpcm/environment/$destnation/global/service_user.env`
if [ "$serviceuser" == "" ]; then
    echo -e "\033[31mPublishing failed: cannot find any content in $GOPATH/vpcm/environment/$destnation/global/service_user.env\033[0m"
    exit 1
fi

if [ ! -f $GOPATH/vpcm/environment/$destnation/global/service_group.env ]; then
    echo -e "\033[31mPublishing failed: cannot find $GOPATH/vpcm/environment/$destnation/global/service_group.env\033[0m"
    exit 1
fi
servicegroup=`cat $GOPATH/vpcm/environment/$destnation/global/service_group.env`
if [ "$servicegroup" == "" ]; then
    echo -e "\033[31mPublishing failed: cannot find any content in $GOPATH/vpcm/environment/$destnation/global/service_group.env\033[0m"
    exit 1
fi
if [ ! -f $GOPATH/vpcm/environment/$destnation/global/environment.env ]; then
    echo -e "\033[31mPublishing failed: cannot find $GOPATH/vpcm/environment/$destnation/global/environment.env\033[0m"
    exit 1
fi
environment=`cat $GOPATH/vpcm/environment/$destnation/global/environment.env`
if [ "$environment" == "" ]; then
    echo -e "\033[31mPublishing failed: cannot find any content in $GOPATH/vpcm/environment/$destnation/global/environment.env\033[0m"
    exit 1
fi

cwd=`pwd`

if [ "$action" == "generate" ]; then
    cd $GOPATH/vpcm/
    pull_branch
    cd $cwd

    if [ "$baseline" == "" ]; then
        uuid=`cat /proc/sys/kernel/random/uuid`
        timestamp=`date -d "now" '+%Y%m%d-%H%M%S'`
        newbaseline="$username--$timestamp--$uuid"
    else
        newbaseline=$baseline
    fi
    touch $GOPATH/unstamped.txt
    while read line
    do
        projectname=`echo $line | awk '{ print $1; }'`
        address=`echo $line | awk '{ print $2; }'`
        need_included_baseline=`echo $line | awk '{ print $3; }'`
        need_publish=`echo $line | awk '{ print $4; }'`
        plan_list=`echo $line | awk '{ print $5; }'`
        default_branch=`echo $line | awk '{ print $6; }'`
        
        if [ "$projectname" == "" ]; then
            continue
        fi
        if [ "$need_included_baseline" != "yes" ]; then
            continue
        fi
        
        echo "Checking version for $projectname..."
        if [ ! -d $GOPATH/src/$projectname ]; then
            echo -e "\033[33mCannot find source code directory for project:$projectname. Try to check it out...\033[0m"
            cd $GOPATH/src
            git clone $address $projectname
            if [ "$?" != "0" ]; then
                echo -e "\033[31mCannot check out project:$projectname.\033[0m"
                exit 1
            fi
        fi
        
        if [ "$default_branch" == "" ];then
            default_branch="master"
        fi
        cd $GOPATH/src/$projectname
        if [ "$pull_source" == "yes" ]; then
            pull_branch "$default_branch"
        else
            git fetch --tags
        fi
        changed_files=`git diff --name-only`
        if [ "$changed_files" != "" ]; then
            echo -e "\033[31mProject [$projectname] has files to be commited:\n$changed_files\033[0m"
            exit 1
        fi
        
        if [ ! -f "$GOPATH/src/$projectname/version.txt" ]; then
            if [ ! -f "$GOPATH/src/$projectname/src/version.txt" ]; then
                if [ ! -f "$GOPATH/src/$projectname/bin/version.txt" ]; then
                    echo -e "\033[31mCannot find version.txt for project:$projectname\033[0m"
                    continue
                else
                    tag=`cat $GOPATH/src/$projectname/bin/version.txt`
                fi
            else
                tag=`cat $GOPATH/src/$projectname/src/version.txt`
            fi
        else
            tag=`cat $GOPATH/src/$projectname/version.txt`
        fi

        if [ "$tag" == "" ]; then
            echo -e "\033[31mEmpty version.txt for project:$projectname\033[0m"
            exit 1
        fi
        unstamped=`git diff --stat $tag HEAD`
        if [ "$unstamped" != "" ]; then
            echo "$projectname" >> $GOPATH/unstamped.txt
        fi
        echo "$projectname/$tag" >> $GOPATH/baseline/$newbaseline
    done < $GOPATH/vpcm/environment/$destnation/global/project_list.scm

    unstamped_project=`cat $GOPATH/unstamped.txt`
    rm -f $GOPATH/unstamped.txt
    if [ "$unstamped_project" != "" ]; then
        echo -e "\033[33mFollowing project(s) seems do not have a new tag since last modification:\n$unstamped_project\033[0m"
    fi

    echo -e "\033[32mGenerating new baseline successfully.\nNew baseline: \n$newbaseline\033[0m"
    if [ "$interact_option" == "" ]; then
        read -p "Do you want to commit this baseline?(yes/no):" commit
    else
        commit=$interact_option
    fi
    
    if [ "$commit" == "yes" ]; then
        cd $GOPATH/baseline/
        git add $newbaseline
        git commit -m "$newbaseline"
        git push
        cd $cwd
    fi
fi

if [ "$action" == "pubproject" ]; then
    projectname=`basename \`pwd\``
    
    project_exist=`grep -E "^$projectname " $GOPATH/vpcm/environment/$destnation/global/project_list.scm`
    if [ "$project_exist" == "" ]; then
        echo -e "\033[31mCannot find $projectname in project list!\033[0m"
        exit 1
    fi
    
    if [ ! -f "$GOPATH/src/$projectname/version.txt" ]; then
        if [ ! -f "$GOPATH/src/$projectname/src/version.txt" ]; then
            if [ ! -f "$GOPATH/src/$projectname/bin/version.txt" ]; then
                echo -e "\033[31mCannot find version.txt for project:$projectname\033[0m"
                continue
            else
                tag=`cat $GOPATH/src/$projectname/bin/version.txt`
            fi
        else
            tag=`cat $GOPATH/src/$projectname/src/version.txt`
        fi
    else
        tag=`cat $GOPATH/src/$projectname/version.txt`
    fi
    uuid=`cat /proc/sys/kernel/random/uuid`
    timestamp=`date -d "now" '+%Y%m%d-%H%M%S'`
    baseline="$username--$timestamp--$uuid-temp"
    echo -e "\033[33mGenerated a temporary baseline: $baseline\033[0m"
    echo "$projectname/$tag" > $GOPATH/baseline/$baseline
    action="publish"
    publish_option="all"
fi

if [ "$action" == "publish" ]; then    
    has_published_project="0"
    if [ "$baseline" == "" ]; then
        echo -e "\033[31mBaseline cannot be empty!\033[0m"
        exit 1
    fi

    cd $GOPATH/vpcm
    pull_branch
    cd $GOPATH/baseline
    pull_branch
    cd $cwd

    #Check projects in target directory. build if it does not exist
    baselines=`cat $GOPATH/baseline/$baseline`
    for line in $baselines
    do
        tag=${line##*/}
        projectname=${line%%/*}
        packagepath=$GOPATH/target/$destnation/$projectname/$tag
        if [ ! -d "$packagepath" ]; then
            $GOPATH/tools/vbuild -p $projectname -t $tag -e $destnation
            if [ "$?" != "0" ]; then
                echo -e "\033[31mCannot build $projectname/$tag.\033[0m"
                exit 1
            fi
        fi
    done
    
    hostlist=`cat $GOPATH/vpcm/environment/$destnation/global/host_list.scm`
    for hostline in $hostlist
    do
        hostname=${hostline%%:*}
        port=${hostline##*:}
        echo "Checking $hostname:$port..."
        locked=`ssh -p $port -tq $username@$hostname "if [ ! -f $serviceroot/publish.lock ]; then touch $serviceroot/publish.lock; echo \"locked\" ; fi"`
        if [ "$locked" == "" ]; then
            echo -e "\033[31mPublishing failed: Someone is doing the publish on the target server. Try publishing later.\033[0m"
            exit 1
        fi
        ssh -p $port -tq $username@$hostname "mkdir -p $projectroot"
        ssh -p $port -tq $username@$hostname "sudo cp -f $serviceroot/baseline $projectroot/baseline"
        scp -P $port -q  $username@$hostname:$projectroot/baseline $GOPATH/baseline.$hostname
        ssh -p $port -tq $username@$hostname "sudo rm -f $projectroot/baseline"

        if [ ! -f $GOPATH/baseline.$hostname ]; then
            echo -e "\033[33mCannot fetch remote baseline for host:$hostname Attempt to launch force publishing...\033[0m"
            publish_option="all"
        fi

        rm -f "$GOPATH/final_baseline.$hostname"
        touch "$GOPATH/final_baseline.$hostname"
        for line in $baselines
        do
            tag=${line##*/}
            projectname=${line%%/*}
            compare="0"
            
            need_publish=`grep -E "^$projectname " $GOPATH/vpcm/environment/$destnation/global/project_list.scm | awk '{ print $4; }'`
            plan_list=`grep -E "^$projectname " $GOPATH/vpcm/environment/$destnation/global/project_list.scm | awk '{ print $5; }'`
            
            if [ "$need_publish" != "yes" ]; then
                continue
            fi
            if [ -f $GOPATH/vpcm/environment/$destnation/project/$projectname/conf/host_list.scm ]; then
                target_host=`grep "$hostline" $GOPATH/vpcm/environment/$destnation/project/$projectname/conf/host_list.scm`
                if [ "$target_host" == "" ]; then
                    echo -e "\033[33mProject $projectname does not need to be published in host $hostline.\033[0m"
                    continue
                fi
            fi
            if [ "$publish_option" == "all" ]; then
                echo -e "\033[33mForce publishing $projectname: $tag\033[0m"
                if [ ! -f $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/plan_list.scm ]; then
                    echo -e "\033[31mCannot find $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/plan_list.scm\033[0m"
                    continue
                fi
                
                if [ "$plan_list" == "" ]; then
                    echo -e "\033[31mCannot find any plan for project $projectname\033[0m"
                    continue
                fi
                
                OLD_IFS="$IFS"
                IFS=","
                arr=($plan_list)
                IFS="$OLD_IFS"
                
                for planname in ${arr[@]}
                do
                    if [ "$selected_plan" != "" ]; then
                        if [ "$planname" != "$selected_plan" ]; then
                            continue
                        fi
                    fi
                    target_plan_host=`grep $hostline $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/$planname.host`
                    if [ "$target_plan_host" != "" ]; then
                        publish_project $hostname $port $username $projectname $planname $tag
                        echo $line >> $GOPATH/final_baseline.$hostname
                        has_published_project="1"
                    fi
                done
            else
                remoteitem=`grep -E "^$projectname/" $GOPATH/baseline.$hostname`
                if [ "$remoteitem" != "" ]; then
                    remotetag=${remoteitem##*/}
                     
                    if [ "$publish_option" == "diff" ]; then
                        if [ "$tag" != "$remotetag" ]; then
                            compare="1"
                        fi
                    else
                        if [ "$publish_option" == "upgrade" ]; then
                            compare=`checkver "$tag" "$remotetag"`
                        fi
                    fi
                else
                    remotetag=""
                    compare="1"
                fi
                if [ "$compare" == "1" ]; then
                    echo -e "\033[33m$projectname: $remotetag -> $tag\033[0m"
                    if [ ! -f $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/plan_list.scm ]; then
                        echo -e "\033[33mCannot find $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/plan_list.scm.\033[0m"
                        continue
                    fi
                    plan_list=`cat $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/plan_list.scm`
                    if [ "$plan_list" == "" ]; then
                        echo -e "\033[33mCannot find any content in $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/plan_list.scm.\033[0m"
                        continue
                    fi
                    for planname in $plan_list
                    do
                        target_plan_host=`grep $hostline $GOPATH/vpcm/environment/$destnation/project/$projectname/publish/$planname.host`
                        if [ "$target_plan_host" != "" ]; then
                            publish_project $hostname $port $username $projectname $planname $tag
                            echo $line >> $GOPATH/final_baseline.$hostname
                            has_published_project="1"
                        fi
                    done
                else
                    echo -e "\033[33mSkip $projectname...\033[0m"
                    if [ "$remoteitem" != "" ]; then
                        echo $remoteitem >> $GOPATH/final_baseline.$hostname
                    fi
                fi
            fi
        done

        if [ "$has_published_project" == "1" ]; then
            restart_project $hostname $port $username $toberestarted_projects
            ssh -p $port -tq $username@$hostname "sudo /sbin/service nginx restart"
            echo "Merging baseline..."
            mergebaseline $GOPATH/baseline.$hostname $GOPATH/final_baseline.$hostname
            echo "Uploading baseline..."
            scp -P $port -q $GOPATH/baseline.$hostname $username@$hostname:$projectroot/baseline
            echo "Updating baseline"
            ssh -p $port -tq $username@$hostname "sudo mv -f $projectroot/baseline $serviceroot; sudo chown $serviceuser:$servicegroup $serviceroot/baseline"
        fi
        ssh -p $port -tq $username@$hostname "rm -f $serviceroot/publish.lock"
        rm -f $GOPATH/baseline.$hostname
        rm -f $GOPATH/final_baseline.$hostname
        toberestarted_projects=""
    done
    echo -e "\033[32mPublishing finished.\033[0m"
fi

